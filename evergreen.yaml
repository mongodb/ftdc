#######################################
#         YAML Templates              #
#######################################
variables:
  - &run-build
    # runs a build operation. The task name in evergreen should
    # correspond to a make target for the build operation.
    name: test
    commands:
      - func: run-make
        vars: { target: "${task_name}" }

#######################################
#              Functions              #
#######################################
functions:
  get-project-and-modules:
    - command: git.get_project
      type: system
      params:
        directory: ftdc
    - command: subprocess.exec
      type: setup
      params:
        working_dir: ftdc
        binary: make
        args: ["mod-tidy"]
        include_expansions_in_env: ["GOROOT"]
  parse-results:
    command: gotest.parse_files
    type: setup
    params:
      files:
        - "ftdc/build/output.*"
  run-make:
    command: subprocess.exec
    type: test
    params:
      working_dir: ftdc
      binary: make
      args: ["${make_args|}", "${target}"]
      include_expansions_in_env: ["GOROOT", "RACE_DETECTOR", "TEST_TIMEOUT"]

#######################################
#                Tasks                #
#######################################
tasks:
  - <<: *run-build
    tags: ["test"]
    name: test-ftdc
  - <<: *run-build
    tags: ["test"]
    name: test-events
  - <<: *run-build
    tags: ["test"]
    name: test-hdrhist
  - <<: *run-build
    tags: ["test"]
    name: test-metrics
  - <<: *run-build
    tags: ["test"]
    name: test-util

  - <<: *run-build
    tags: ["lint"]
    name: lint-ftdc
  - <<: *run-build
    tags: ["lint"]
    name: lint-events
  - <<: *run-build
    tags: ["lint"]
    name: lint-hdrhist
  - <<: *run-build
    tags: ["lint"]
    name: lint-metrics
  - <<: *run-build
    tags: ["lint"]
    name: lint-util

  - name: verify-mod-tidy
    commands:
      - command: git.get_project
        type: system
        params:
          directory: ftdc
      - func: run-make
        vars: { target: "${task_name}" }

task_groups:
  - name: lintGroup
    tasks: [ ".lint"]
    max_hosts: 2
    setup_group:
      - func: get-project-and-modules
    setup_task:
      - func: run-make
        vars: { target: "clean-results" }
    teardown_task:
      - func: parse-results
  - name: testGroup
    tasks: [ ".test"]
    max_hosts: 2
    setup_group_can_fail_task: true
    share_processes: true
    setup_group:
      - func: get-project-and-modules
    setup_task:
      - func: run-make
        vars: { target: "clean-results" }
    teardown_task:
      - func: parse-results

#######################################
#           Buildvariants             #
#######################################
buildvariants:
  - name: race-detector
    display_name: Race Detector (Arch Linux)
    expansions:
      RACE_DETECTOR: true
      GOROOT: /opt/golang/go1.16
      TEST_TIMEOUT: 1h
    run_on:
      - archlinux-new-large
    tasks: [ "testGroup" ]

  - name: lint
    display_name: Lint (Arch Linux)
    expansions:
      GOROOT: /opt/golang/go1.16
    run_on:
      - archlinux-new-small
    tasks:
      - lintGroup
      - verify-mod-tidy

  - name: ubuntu
    display_name: Ubuntu 18.04
    expansions:
      GOROOT: /opt/golang/go1.16
    run_on:
      - ubuntu1804-test
    tasks: [ "testGroup" ]

  - name: macos
    display_name: macOS
    expansions:
      GOROOT: /opt/golang/go1.16
    run_on:
      - macos-1014
    tasks: [ "testGroup" ]

  - name: windows
    display_name: Windows
    run_on:
      - windows-64-vs2019-small
      - windows-64-vs2019-large
      - windows-64-vs2017-small
      - windows-64-vs2017-large
    expansions:
      GOROOT: C:/golang/go1.16
    tasks: [ "testGroup" ]
